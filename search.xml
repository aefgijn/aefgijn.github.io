<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[oh-my-zsh插件推荐]]></title>
    <url>%2FLinuxMint%2F2259%2F</url>
    <content type="text"><![CDATA[一些常用的插件 插件配置大部分插件基本已经内置了,除了少部分才需要手动添加~/.oh-my-zsh/plugins里面有默认自带的近百插件,配置后即可启用,如图: 参考此处 安装好 zsh 和 oh-my-zsh 后，打开文件~/.zshrc，其中有如下行：1plugins=(git) 将需要的插件按空格分开，放于此处即可。我的配置如下： 1234567plugins=( git autojump sublime zsh-autosuggestions zsh-syntax-highlighting) 修改完后，如果需要在当前shell中生效，需要执行1$ source ~/.zshrc 插件推荐zsh-autosuggestions (历史命令智能提示）下载插件1$ git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions 在～/.zshrc中配置1plugins=(其他插件 zsh-autosuggestions) 使配置生效1$ source ~/.zshrc zsh-syntax-highlighting (命令高亮 ,路径自带下划线)同上1$ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting autojump (常用目录快速跳转)下载插件1$ git clone https://github.com/joelthelion/autojump.git 进入目录，执行1$ ./install.py 在～/.zshrc中配置1plugins=(其他插件 autojump) 把以下代码加入 .zshrc：1[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh 使配置生效1$ source ~/.zshrc sublime (在终端使用 Sublime Text 打开文件、项目) 命令 作用 st 打开 sublime st + 文件夹 打开该文件夹 st + 文件 打开该文件 stt 打开当前的文件夹，相当于 st . sst 管理员权限 相当于 sudo st 虽然 oh-my-zsh 提供了很多插件，不过也不要贪多，大量的插件会拖慢打开的速度，因此只安装你常用的就好了。]]></content>
      <categories>
        <category>LinuxMint</category>
        <category>Program</category>
      </categories>
      <tags>
        <tag>LinuxMint</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LinuxMint安装配置zsh和on-my-zsh(转)]]></title>
    <url>%2FLinuxMint%2F4737%2F</url>
    <content type="text"><![CDATA[LinuxMint终端美化 前言 查看本地有哪几种shell $ cat /etc/shells 我的 Linux Mint 有以下几种：1234567/bin/sh/bin/dash/bin/bash/bin/rbash/bin/zsh/usr/bin/zsh/usr/bin/tmux 安装安装 git$ sudo apt-get install git 安装 zsh$ sudo apt-get install zsh 设置 zsh 为默认的 shell$ chsh -s /bin/zsh 安装 on-my-zshcurl 方式1$ sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" wget 方式1$ sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)" 配置 on-my-zsh配置 agnoster 主题$ vim ~/.zshrc 更改以下内容：123ZSH_THEME="agnoster"#agnoster主题的配置，其他主题不支持，这里配置默认用户名，配置之后，在终端中默认隐藏用户名DEFAULT_USER=$USER 因为agnoster主题使用了一些符号字体，需要安装符号字体powerline Powerline的GitHub：powerline 下载之后解压进入目录，安装powerline字体 $ ./install.sh 然后进入终端修改终端字体为 Roboto Mono for Powerline Regular 更新下配置文件source ./zshrc OK，配置完成，你会发现你的终端从屌丝变成高富帅啦～ 晒一张我的终端截图： 更多详细配置以下是作者的 wiki： on-my-zsh配置 on-my-zsh主题配置 on-my-zsh插件配置]]></content>
      <categories>
        <category>LinuxMint</category>
        <category>Program</category>
      </categories>
      <tags>
        <tag>LinuxMint</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shadowsocks-qt5+全局代理]]></title>
    <url>%2FLinuxMint%2F3825%2F</url>
    <content type="text"><![CDATA[科学上网 前言 从事计算机工作的免不了要翻墙查阅资料啥的，于是各种各样的工具应运而生，譬如:ss，ssr，VPN等等．作用大同小异笔者选择了这款 Shadowsocks-qt5 来实现科学上网 环境 Linux mint (ubuntu) 工具 Shadowsocks-qt5 GenPAC SwitchyOmega 安装 Shadowsocks-qt5 通过 PPA 源安装，仅支持 Ubuntu 14.04 或更高版本。 123$ sudo add-apt-repository ppa:hzwhuang/ss-qt5$ sudo apt-get update$ sudo apt-get install shadowsocks-qt5 AppImage 版本，任何64位 Linux 发行版 下载最新的AppImage 12$ chmod a + x Shadowsocks-Qt5-x86_64.AppImage$ ./Shadowsocks-Qt5-x86_64.AppImage PAC全局配置安装 GenPAC GenPAC 是基于 gfwlist 的代理自动配置（Proxy Auto-config）文件生成工具，支持自定义规则。 1234567$ sudo pip install setuptools# 安装$ sudo pip install genpac# 更新$ sudo pip install --upgrade genpac# 卸载$ sudo pip uninstall genpac 如果出现如下问题 1234Traceback (most recent call last): File "/usr/bin/pip", line 9, in &lt;module&gt; from pip import mainImportError: cannot import name main 解决方法： 将/usr/bin/pip文件中123from pip import mainif __name__ == '__main__': sys.exit(main()) 改为：123from pip import __main__if __name__ == '__main__': sys.exit(__main__._main()) 下载 gfwlist12# PAC格式 如果在线gfwlist获取失败使用本地文件，如果在线gfwlist获取成功更新本地gfwlist文件genpac --format=pac --pac-proxy="SOCKS5 127.0.0.1:1080" --gfwlist-local=~/gfwlist.txt --gfwlist-update-local -o autoproxy.pac 在根目录生成了一个 autoproxy.pac 文件，就是我们用于代理的文件 设置 在网络设置中，”网络代理” 设置为 “自动设置” url指向我们前面生成的 pac 文件 12# user为你自己的用户名(不要花括号....)file:///home/&#123;user&#125;/autoproxy.pac 至此，PAC全局代理就实现了 Chrome浏览器配置 SwitchyOmega 一款管理代理服务器(翻墙)的插件,可以设置使用本地 shadowsocks 作为代理服务器. 在线安装 在 google chrome webstore 中, 搜索 SwitchyOmega ，然后直接安装： 本地安装 如果 google chrome webstore 被墙了。此时需要做的事情是： 下载 SwitchyOmega 备用下载地址： https://github.com/FelisCatus/SwitchyOmega/releases 安装 在 Chrome 的地址栏中输入&quot;chrome://extensions/&quot; 打开扩展程序管理界面，然后拖放下载的 SwitchyOmega.crx 文件到这个界面，就可以安装了。 配置 注意:代理协议一定要设置为 SOCKS5. 设置自动切换 为了方便, 可以在 SwitchyOmega 中设置自动切换,规则列表设置格式为 AutoProxy。 规则列表网址为下面地址,保存后更新: https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 这样用 chrome 上网就可以自动切换代理,需要翻墙时自动连 shadowsocks,不需要时直连. 现在开始,让我们优雅的上网吧。]]></content>
      <categories>
        <category>LinuxMint</category>
        <category>Program</category>
      </categories>
      <tags>
        <tag>LinuxMint</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[极限运动炫酷混剪]]></title>
    <url>%2Fvideo%2F3410%2F</url>
    <content type="text"><![CDATA[精彩无处不在 2015 Best Of Web 8 (function(){var player = new DPlayer({"container":document.getElementById("dplayer5"),"video":{"url":"http://hc.yinyuetai.com/uploads/videos/common/EEEB015E3145044C18003FA4EFEC4990.mp4","pic":"https://blog-1258173165.cos.ap-shanghai.myqcloud.com/image/sport-extreme02.png"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})() 2016 Best of Web 9 (function(){var player = new DPlayer({"container":document.getElementById("dplayer6"),"video":{"url":"http://hd.yinyuetai.com/uploads/videos/common/1D06015F243AA18A09717C3826AA1132.mp4","pic":"https://blog-1258173165.cos.ap-shanghai.myqcloud.com/image/sport-extreme03.png"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})() 2017 Best of Web 10 (function(){var player = new DPlayer({"container":document.getElementById("dplayer7"),"video":{"url":"http://hd.yinyuetai.com/uploads/videos/common/709001603518F0D0497A862721D11458.mp4","pic":"https://blog-1258173165.cos.ap-shanghai.myqcloud.com/image/sport-extreme04.png"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()]]></content>
      <categories>
        <category>video</category>
        <category>sport</category>
      </categories>
      <tags>
        <tag>sport</tag>
        <tag>extreme</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Harmattan:一款时尚的Linux桌面伴侣]]></title>
    <url>%2FLinuxMint%2F5425%2F</url>
    <content type="text"><![CDATA[一款时尚的Linux桌面伴侣 简介 Harmattan是一组精巧的主题，在Ubuntu桌面上显示桌面小部件，包含日期和时间，天气预报，网络速度和系统资源使用情况的信息。 Harmatten包括： 12个主题，包括Ubuntu Touch，Numix和Elementary designs4种显示模式，包括‘mini’和‘compact‘2种天气模式天气单位转换不像大多数Conky主题，Harmattan不会将别人屏幕的样子复制到你的屏幕上。 默认情况下Harmattan是“固定”的；你需要按下ALT键并用鼠标点击和移动它。或者你也可以在设置中调整conky-config中的’x’和’y’值 。此外，也别忘记修改天气预报小部件的地区代码，它在.conkyrc里面。 获取&amp;安装要使用这个主题，你需要先从Ubuntu软件中心安装conky-all,curl和jq。如果没有这些,某些功能可能无法正常工作。 简单步骤: Install conky-all in UbuntuInstall curl in Ubuntu 下一步，从作者github的页面上下载主题包。 主题包之后提取Harmattan文件，按Ctrl + H,开启查看“隐藏”的文件。最后，根据‘Installation’指导进行。 详细步骤:安装conky-all+curl+jq,略过解压主题包到相应目录下 运行脚本文件:preview.sh 选择主题 按上面的操作选择相应的主题,这里笔者选择的”Ubuntu-Touch”,以此为例主题选择好后,还需要配置参数,才能物尽其用 网络信息设置获取网络接口名： 命令 1sudo lshw -class network GUI界面 天气设置 在OpenWeatherMap上注册并获取个人API Key 获取当地城市ID 运行preview.sh并输入API Key+ID 开机自启动设置 命令:conky -q 效果预览]]></content>
      <categories>
        <category>LinuxMint</category>
        <category>Program</category>
      </categories>
      <tags>
        <tag>LinuxMint</tag>
        <tag>Harmattan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的博客,我的效果]]></title>
    <url>%2Fhexo%2F2848%2F</url>
    <content type="text"><![CDATA[部分效果展示 音乐 单首 var ap = new APlayer({ element: document.getElementById("aplayer-FtUAJpfz"), narrow: false, autoplay: false, showlrc: false, music: { title: "Welcome to New York", author: "Taylor Swift", url: "http://other.web.rf01.sycdn.kuwo.cn/resource/n3/3/96/1977133010.mp3", pic: "http://p1.music.126.net/aw90yskYzfcy3lNkpfmbng==/18446506579453918.jpg", lrc: "" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 多首 var options = {"narrow":false,"autoplay":false,"showlrc":3,"mutex":true,"music":[{"title":"Think Again","author":"Kate Havnevik","url":"http://other.web.ri01.sycdn.kuwo.cn/resource/n2/97/54/2238335984.mp3","pic":"http://p1.music.126.net/XfcPoljRr2ONWK3A40fa2g==/827932255760293.jpg","lrc":""},{"title":"Counting Stars","author":"Simply Three","url":"http://other.web.rr01.sycdn.kuwo.cn/resource/n3/37/66/1916289173.mp3","pic":"http://p1.music.126.net/k8pDXym-wRCtgEaT82SpBg==/8897248092145389.jpg","lrc":""}]}; options.element = document.getElementById("aplayer-dWgWBqbb"); var ap = new APlayer(options); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 视频 Heathens-Twenty One Pilots 电影《X特遣队》主题曲曲目《Heathens》时长：03：15语言：英语唱片公司：大西洋唱片公司演唱：Twenty One Pilots发行日期：2016年6月16日 (function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"video":{"url":"http://he.yinyuetai.com/uploads/videos/common/0CBE01600FE7C8831AD9E4D2A5DD92D9.mp4","pic":"https://blog-1258173165.cos.ap-shanghai.myqcloud.com/image/Heathens.png"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})() 主题自带样式 note 标签defaultprimarysuccessinfowarningdangerdanger no-icon]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GoldenDict]]></title>
    <url>%2FLinuxMint%2F0649%2F</url>
    <content type="text"><![CDATA[一款挺棒的开源词典 简介 GoldenDict是一种开源的辞典软体，可为不同语言提供词汇、词组释义。其允许同时使用多种流行的辞典档案格式且无需转换。 特性 该程式是自由及开放源代码软件（FOSS）。 支援多种电子辞典档案格式，具体如下： XDXF（XML Dictionary eXchange Format）Babylon（.bgl），附图像和资源。StarDict（.ifo、.dict、.idx、.syn）Dictd（.index、.dict、.dz）ABBYY Lingvo（.dsl）源档案，连同缩写档案。ABBYY Lingvo（.lsa、.dat）音讯档案。可单独索引，也可从.dsl档索引。Sdictionary（.dct）。该格式也称为sdict。Aard（.aar）Zip档中的音讯包MDict（.mdx、.mdd）EPWING 格式辞典 使用WebKit排版引擎，以呈现更准确的条目表现（其中涵盖格式、颜色、图像和连结）。 支援维基百科、维基词典等基于MediaWiki的网站。 可以透过模板化的URL方式，使用像词典那种的任意网站。 可以翻译诸多语种的长文本 具有基于Hunspell的形态系统——用在单词词干及拼写建议。 可以向外部程式传送词汇，还可连带其他辞典结果一并输出。 完全的Unicode支援。 支援多种语言的音译。 支援Windows与OS X的本地TTS。 支援屏幕取词功能。从另一程式选中词汇，会弹出一个小巧的视窗以显示译文。 支援全域快速键。可凭此启动程式视窗，也可从剪贴簿取词翻译。 使用由Qt4/5界面提供的标签式浏览。 支援NPAPI网络插件（如Flash Player）。 支援辞典定制的图示。 平台支援如右：Linux/X11、Mac OS X、MaeMo、Android、Windows以及其他移植版本。 使用Forvo线上服务时，允许发音音讯播放。 支援全文搜寻。 安装1sudo apt-get install goldendict 设置 添加词典 本地词典 密码: 8sqp 本地词典 牛津高阶8简体spx 朗文当代 牛津、朗文、剑桥、柯林斯双解四合一 汉语大词典(简体精排) 象形9000 ……. 在线词典 海词 http://dict.cn/%GDWORD% 汉典 http://www.zdic.net/sousuo/?q=%GDWORD% bing http://cn.bing.com/dict/search?q=%GDWORD% 有道词典 http://dict.youdao.com/search?q=%GDWORD%&amp;ue=utf8 维基百科 中文百科 https://zh.wikipedia.org/w 中文词典 https://zh.wiktionary.org/w English Wikipedia https://en.wikipedia.org/w English Wiktionary https://en.wiktionary.org/w 使用效果]]></content>
      <categories>
        <category>LinuxMint</category>
        <category>Program</category>
      </categories>
      <tags>
        <tag>GoldenDict</tag>
        <tag>LinuxMint</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[尬舞尬出新天地]]></title>
    <url>%2Fvideo%2F5080%2F</url>
    <content type="text"><![CDATA[Wow, you can really dance(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"video":{"url":"https://blog-1258173165.cos.ap-shanghai.myqcloud.com/video/%E6%89%AD%E8%82%A9%E8%86%80%E5%B0%AC%E8%88%9E.mp4","pic":"https://blog-1258173165.cos.ap-shanghai.myqcloud.com/image/battle.png"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()]]></content>
      <categories>
        <category>video</category>
        <category>dance</category>
      </categories>
      <tags>
        <tag>dance</tag>
        <tag>尬舞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我们身处的宇宙]]></title>
    <url>%2Fvideo%2F2849%2F</url>
    <content type="text"><![CDATA[沧海一粟,我们究竟在哪? (function(){var player = new DPlayer({"container":document.getElementById("dplayer9"),"video":{"url":"http://he.yinyuetai.com/uploads/videos/common/8604015F98F1F7F45A96244B8D401D98.mp4","pic":"https://blog-1258173165.cos.ap-shanghai.myqcloud.com/image/universe02.jpg"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})() 对于身处银河系荒凉偏僻的旋臂上，微小的太阳星系中，一颗渺小蓝色星球上，尘埃一样微不足道的我们，究竟有多么渺小？我们总是听到我们只是银河系的沧海一粟，一个悬浮在光束上” 淡蓝色光点的小小尘埃”。 浩瀚宇宙的未知让人感觉到恐惧，目前人类已观测到的离地球最远的星系在130亿光年外，而现可观测宇宙半径在推测约为465亿光年。宇宙的边界到底在哪里？宇宙之外是否还有其他宇宙？我们无法知道真正的答案。 Youtube帐户morn1415的这支短片在这里帮助我们了解我们所在的世界。从太阳系内最小的矮行星（谷神星），到至今人类已知体积最大的恒星（盾牌座UY）；从包含数十亿颗恒星的银河系，到包含银河系在内约10万个星系的拉尼亚凯亚超星系团；从每一样东西都以光速来测量，到光也未曾穿越的可能存在的其他宇宙。 也许绞尽脑汁也很难想像银河系的空间和在里面天体实际上有多大。但无论是好奇心的驱使，还是文明进步所需，人类对宇宙的探测也从未停止。所以，当你一个人在夜晚以45度角仰望天空的时候，看到的不是恐惧，也不是寂寞，而是满满的宇宙的历史]]></content>
      <categories>
        <category>video</category>
        <category>science</category>
      </categories>
      <tags>
        <tag>universe</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电影舞蹈混剪 On The Floor & Uptown Funk]]></title>
    <url>%2Fvideo%2F0744%2F</url>
    <content type="text"><![CDATA[情不自禁,停不下来 (function(){var player = new DPlayer({"container":document.getElementById("dplayer3"),"video":{"url":"https://blog-1258173165.cos.ap-shanghai.myqcloud.com/video/300%E9%83%A8%E7%94%B5%E5%BD%B1%E8%88%9E%E8%B9%88%E6%B7%B7%E5%89%AA%E3%80%8AOn%20The%20Floor%E3%80%8B.mp4","pic":"https://blog-1258173165.cos.ap-shanghai.myqcloud.com/image/On%20The%20Floor01.png"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})() (function(){var player = new DPlayer({"container":document.getElementById("dplayer4"),"video":{"url":"http://he.yinyuetai.com/uploads/videos/common/5BEE01602B328C044C4BD44DE2B757BC.mp4","pic":"https://blog-1258173165.cos.ap-shanghai.myqcloud.com/image/On%20The%20Floor02.png"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})() BGM： Jennifer Lopez《On The Floor》 Mark Ronson &amp; Bruno Mars《Uptown Funk》。 部分电影一览: 功夫 洛基3 憨豆先生的假期 卑鄙的我 回到未来3 死者肖恩 阿拉丁 蜘蛛侠3 华尔街之狼 低俗小说 美国派 泰迪熊 舞出我人生系列 贫民窟的百万富翁 怪物史莱克 自由自在 快乐的大脚 狮子王 触不可及 无敌破坏王 星球大战6 和沙莫的500天 美女与野兽 马达加斯加 窈窕奶爸 阳光小美女 乌云背后的幸福线 妈妈咪呀 set up 魔力麦克 修女也疯狂 白头神探 蚁人 惊声尖笑 拜见岳父大人 剪刀手爱德华 黑天鹅 霹雳娇娃 哈利波特 变相怪杰 …….]]></content>
      <categories>
        <category>video</category>
        <category>dance</category>
      </categories>
      <tags>
        <tag>dance</tag>
        <tag>混剪</tag>
        <tag>movie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是体脂率?]]></title>
    <url>%2Ffitness%2F3125%2F</url>
    <content type="text"><![CDATA[体脂率下降5%，你的身体就会有“质”的提升，你的身体会发生翻天覆地的变化 什么是体脂率？体脂率就是你体内脂肪占身体其他成分的比例。我们要知道，同样重量的脂肪和肌肉，脂肪的体积要比肌肉大得多的多，所以，我们减肥的时候，是要减掉脂肪，降低自己的体脂率。 而且有研究显示，只要减去5%的体脂，你身体发生疾病的风险就可以大大降低。因为在你减肥的开始阶段，会减掉大量不健康的“内脏脂肪”，它们之前堆积在你的内脏周围，压迫器官、血管，影响你的健康。 当我们减去了这部分的脂肪，我们的身体也就更“轻松”，更健康。 怎么测量体脂率?自己的体脂率如何?可以粗略查考下面的对比图. 男子的体脂率体型特点： 比例 特点 4%~6% 臀大肌出现横纹（健美运动员最理想的竞技状态） 7%~9% 背肌显露，腹肌、腹外斜肌分块更加明显（健美运动员竞技状态） 10%~12% 全身各部位脂肪不松弛，腹肌分块明显 13%~15% 全身各部位脂肪基本不松弛，腹肌开始显露，分块不明显 16%~18% 全身各部位脂肪就腰腹部较松弛，腹肌不显露 19%~21% 腹肌不显露，腰围通常是81~85厘米 22%~24% 腹肌不显露，腰围通常是86~90厘米 25%~27% 腹肌不显露，腰围通常是91~95厘米 28%~30% 腹肌不显露，腰围通常是96~100厘米 31%以上 腹肌不显露，腰围通常是101厘米以上 女子的体脂率体型特点： 比例 特点 8%~10% 极少数女运动员达到的竞技状态（会引起闭经、月经紊乱） 11%~13% 背肌显露，腹外斜肌分块更加明显（女子健美运动员竞技状态） 14%~16% 背肌显露，腹肌分块更加明显 17%~19% 全身各部位脂肪不松弛，腹肌分块明显 20%~22% 全身各部位脂肪不松弛，腹肌开始显露，分块不明显 23%~25% 全身各部位脂肪基本不松弛，腹肌不显露 26%~28% 全身各部位脂肪就腰腹部明显松弛，腹肌不显露 29%~31% 腹肌不显露，腰围通常是81~85厘米 32%~34% 腹肌不显露，腰围通常是86~90厘米 35%~37% 腹肌不显露，腰围通常是91~95厘米 38%~40% 腹肌不显露，腰围通常是96~100厘米 41%以上 腹肌不显露，腰围通常是101厘米以上 怎样让体脂率下降？三分练每周运动4次以上，每次40分钟——力量训练和有氧训练（慢跑、快走、蹲起、等） 七分吃清淡饮食会让身体难以堆积脂肪。平时吃菜时，可以多吃蔬菜，多摄入像鸡胸肉、牛肉、鱼虾等蛋白质含量比较高的食物。]]></content>
      <categories>
        <category>fitness</category>
        <category>data</category>
      </categories>
      <tags>
        <tag>fitness</tag>
        <tag>BMI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[极限健身牛人Frank Medrano]]></title>
    <url>%2Ffitness%2F0719%2F</url>
    <content type="text"><![CDATA[谁说吃草不长肌肉,瞧瞧人家纯素食牛人… (function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"https://blog-1258173165.cos.ap-shanghai.myqcloud.com/video/%E8%A1%97%E5%A4%B4%E6%9E%81%E9%99%90%E5%81%A5%E8%BA%ABFrank%20Medrano.mp4","pic":"https://blog-1258173165.cos.ap-shanghai.myqcloud.com/image/Frank-Medrano_002.jpg"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})() Frank Medrano何许人健身达人 FrankMedrano ，是一名健美体操 (calesthenics) 的爱好者。体脂率常年维持在8%,這是我梦寐以求的身材。而且你根本想象不到的是，他是素食主义者，别人只吃草。 和多数人一样，弗兰克不是天生的纯素食者，至少有30年他也吃肉。虽然他健身训练已有7年，得知他的两位朋友丹·阿塔那西奥（Dan Attanasio）和诺尔·波兰科（Noel Polanco）是纯素食者也只是1年多前的事情。那两位也是健身者，弗兰克很好奇。这两位朋友帮助弗兰克制定素食计划、安排饮食，并为他答疑。仅仅两三个月的时间，素食便使弗兰克获益匪浅。最为显著的是，体能的增进确实不小，同时体能恢复的速度也快。因此弗兰克称素食”超级健康”。.弗兰克说：“我以前认为自己很健康也很强壮，但当我开始素食后，我逐渐感到自己精力特别充沛，尤其是训练后的体能恢复速度明显加快了”。 什么是体脂率? 神一般的健身动作: 刻苦训练铸造了他线条如雕刻般的身体:]]></content>
      <categories>
        <category>video</category>
        <category>fitness</category>
      </categories>
      <tags>
        <tag>fitness</tag>
        <tag>Frank Medrano</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大神级环游世界滑板短片《Ski the world》]]></title>
    <url>%2Fvideo%2F3656%2F</url>
    <content type="text"><![CDATA[滑天滑地滑空气 (function(){var player = new DPlayer({"container":document.getElementById("dplayer8"),"video":{"url":"http://he.yinyuetai.com/uploads/videos/common/D21501614006DBA2591718ABEE88AB60.mp4","pic":"https://cs.vmovier.com/Uploads/cover/2018-01-23/5a66f01b06756_cut.jpeg@600w_400h_1e_1c.jpg"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})() 滑雪、滑草、滑沙都不是新发明了，可在法国专业滑手Candide Thovex这里你会发现，在耳熟能详的花样都有可能创造出新的惊喜。在这支和奥迪合作的短片中，Candide踩着滑雪板，却完全脚不沾雪，从欧洲、美国到亚洲，在各种意想不到的地方进行滑行。土、石、草、水、沙漠、丛林，别人环游世界是拍风景，这位大神环游世界是在所经之处都留下一串惊叹号。]]></content>
      <categories>
        <category>video</category>
        <category>sport</category>
      </categories>
      <tags>
        <tag>sport</tag>
        <tag>Ski</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO & NexT个性化设置]]></title>
    <url>%2Fhexo%2F3719%2F</url>
    <content type="text"><![CDATA[记录一些自己用到的个性化设置 3D动态背景3D鼠标实现效果图 具体实现方法 打开主题配置文件_config.yml，查找canvas_nest，设为true~/blog/themes/next/_config.yml12345...# Canvas-nest# Dependencies: https://github.com/theme-next/theme-next-canvas-nestcanvas_nest: true... 3D线条实现效果图 具体实现方法 安装模块到~/blog/themes/next/source/lib1$ git clone https://github.com/theme-next/theme-next-three source/lib/three 打开主题配置文件_config.yml，查找canvas_lines，设为true~/blog/themes/next/_config.yml12345678910...# JavaScript 3D library.# Dependencies: https://github.com/theme-next/theme-next-three# three_wavesthree_waves: false# canvas_linescanvas_lines: true# canvas_spherecanvas_sphere: false... 修改文章底部的标签图标实现效果图 具体实现方法 修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 在每篇文章末尾统一添加“本文结束”标记实现效果图 具体实现方法在路径 /themes/next/layout/_macro 中新建 passage-end-tag.swig 文件，并添加以下内容：~/blog/themes/next/layout/_macro/passage-end-tag.swig12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开/themes/next/layout/_macro/post.swig文件，在post-body 之后， post-footer 之前，添加如下代码（post-footer之前两个DIV）：~/blog/themes/next/layout/_macro/post.swig12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 然后打开主题配置文件_config.yml在末尾添加：~/blog/themes/next/_config.yml123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 点击侧栏头像回到博客首页首先要在主题配置文件中配置好，比如我把头像avatar.gif放在~/blog/source/uploads/下，则：~/blog/themes/next/_config.yml1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: /uploads/avatar.gif 然后编辑文件sidebar.swig ~/blog/themes/next/layout/_macro/12345+ &lt;a href="/"&gt; &lt;img class="site-author-image" itemprop="image" src="&#123;&#123; url_for( theme.avatar | default(theme.images + '/avatar.gif') ) &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125;" /&gt;+ &lt;/a&gt; 设置页面显示数目~/blog/_config.yml12345678910111213141516171819# Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)#主页每页显示文章数index_generator: path: '' per_page: 10 order_by: -date#archive归档文章显示条数archive_generator: per_page: 50#tagtag_generator: per_page: 30#categorycategory_generator: per_page: 30 gulp 压缩代码首先安装插件：1$ npm install gulp -g 然后到站点文件夹根目录：1$ npm install gulp gulp-minify-css gulp-htmlmin gulp-htmlclean --save 接着在站点文件夹根目录新建 gulpfile.js：~/blog/gulpfile.js123456789101112131415161718192021222324var gulp = require('gulp');var minifycss = require('gulp-minify-css');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');// 压缩 public 目录 cssgulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public 目录 htmlgulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 执行 gulp 命令时执行的任务gulp.task('default', ['minify-html', 'minify-css']); 最后部署到 Github Pages 上查看效果：1234hexo cleanhexo ggulphexo d 修改(代码)字体大小打开~/blog/themes/next/source/css/_variables/base.styl文件，如下修改：~/blog/themes/next/source/css/_variables/base.styl12345...$font-size-base = 15px...$code-font-size = 12px... 设置动态 title在 /themes/next/source/js/src 目录下新建 dytitle.js 。添加以下内容： ~/blog/themes/next/source/js/src/dytitle.js1234567891011121314151617&lt;!--崩溃欺骗--&gt;var OriginTitile = document.title; var titleTime; document.addEventListener('visibilitychange', function () &#123; if (document.hidden) &#123; $('[rel="icon"]').attr('href', "/img/TEP.ico"); document.title = ' 页面崩溃啦 ! | 快回来！'; clearTimeout(titleTime); &#125; else &#123; $('[rel="icon"]').attr('href', "/favicon.ico"); document.title = ' 噫,又好了!' + OriginTitile; titleTime = setTimeout(function () &#123; document.title = OriginTitile; &#125;, 2000); &#125; &#125;); 更改 /themes/next/layout/_layout.swig 。在 &lt;/body&gt;之前添加： ~/blog/themes/next/layout/_layout.swig12&lt;!--卖萌--&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/dytitle.js&quot;&gt;&lt;/script&gt; 添加音乐&amp;视频用到两个插件: hexo-tag-aplayer hexo-tag-dplayer 音乐首先在站点文件夹根目录安装插件：1npm install hexo-tag-aplayer --save 官方文档一般文章中的写法：1&#123;% aplayer "XXX" "XXX" "https://XXX.mp3" "https://XXX.jpg" "lrc:https://XX.lrc" %&#125; 歌单书写方式:1234567891011121314151617181920212223&#123;% aplayerlist %&#125;&#123; "autoplay": false, "showlrc": 3, "mutex": true, "music": [ &#123; "title": "歌曲名", "author": "歌手名", "url": "https://XXX.mp3", "pic": "https://XXX.jpg", "lrc": "https://XXX.lrc" &#125;, &#123; "title": "歌曲名", "author": "歌手名", "url": "https://XXX.mp3", "pic": "https://XXX.jpg", "lrc": "https://XXX.lrc" &#125; ]&#125;&#123;% endaplayerlist %&#125; 视频首先在站点文件夹根目录安装插件：1npm install hexo-tag-dplayer --save 官方文档一般文章中的写法：12345&#123;% dplayer "url=https://XXX.mp4" "pic=https://XXX.jpg" "api=https://api.prprpr.me/dplayer/" "id=" "loop=false" %&#125; 配置 SitemapSitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是XML 文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。 1$ npm install hexo-generator-sitemap --save 配置到站点配置文件:~/biog/_config.yml123sitemap: path: sitemap.xml #path 表示 Sitemap 的路径. 默认为 sitemap.xml. 对于国内用户还需要安装:1$ npm install hexo-generator-baidu-sitemap --save 配置到站点配置文件:~/biog/_config.yml12baidusitemap: path: baidusitemap.xml 本地搜索在站点的根目录下执行以下命令：1$ npm install hexo-generator-searchdb --save 编辑站点配置文件，新增以下内容到任意位置 ~/hexo/_config.yml12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件，启用本地搜索功能： ~/hexo/themes/next/_config.yml12local_search: enable: true 更改标签云（tagcloud）的颜色如果你和我一样个性化了博客的整体布局颜色，那么默认的标签云页面可能看起来很丑，怎么更改？ 修改下文件：~/blog/themes/next/layout/page.swig1&#123;&#123; tagcloud(&#123;min_font: 13, max_font: 31, amount: 1000, color: true, start_color: &apos;#9733EE&apos;, end_color: &apos;#FF512F&apos;&#125;) &#125;&#125; Next主题 6.0+ 新配置设置 侧栏头像设置~/blog/themes/next/_config.yml123456789101112131415 # Sidebar Avataravatar: # in theme directory(source/images): /images/avatar.gif # in site directory(source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/avatar.gif # If true, the avatar would be dispalyed in circle. # 头像设置为圆形 rounded: true # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar. # 设置透明度 opacity: 1 # If true, the avatar would be rotated with the cursor. # 头像旋转 rotated: true 代码块圆角+复制按钮~/blog/themes/next/_config.yml1234567891011codeblock: # Manual define the border radius in codeblock # 手动定义代码块圆角 # Leave it empty for the default 1 border_radius: 10 # Add copy button on codeblock # 添加复制按钮 copy_button: enable: true # Show text copy result show_result: true 博文字数统计Next V6 下使用 hexo-symbols-count-time 进行替代。1$ npm install hexo-symbols-count-time --save 在站点配置文件中开启： ~/hexo/_config.yml12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true 然后在主题配置文件中开启： ~/hexo/themes/next/_config.yml12345678# Post wordcount display settings# Dependencies: https://github.com/theme-next/hexo-symbols-count-timesymbols_count_time: separated_meta: true item_text_post: true item_text_total: true awl: 5 wpm: 200 我的自定义 custom.styl~/blog/themes/next/source/css/_custom/custom.styl123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396// Custom styles.//首页头部样式.header &#123; background: url("/images/header-bbk.jpg");&#125;// 站点名背景.brand&#123; background-color: rgba(255, 255, 255, 0); margin-top: 15px; padding: 0px;&#125;// 站点名字体.site-meta &#123; margin-left: 0px; text-align: center;&#125;.site-meta .site-title &#123; margin-top: 60px; font-size: 50px; font-family: 'Comic Sans MS', sans-serif; color: #fff;&#125;// 菜单.menu &#123; text-align: center; margin-top: 0px; margin-bottom: 0px; padding: 5px; background-color: rgba(255, 255, 255, 0);&#125;// 菜单超链接字体大小.menu .menu-item a &#123; font-size: 15px;&#125;// 菜单各项边距.menu .menu-item &#123; margin: 5px 15px;&#125;// 菜单超链接样式.menu .menu-item a:hover &#123; border-bottom-color: rgba(161, 102, 171, 0);&#125;// 修改背景图片body&#123; background-image:url(/images/bg.png); background-attachment: fixed; // 不随屏幕滚动而滚动 background-repeat: no-repeat; // 如果背景图不够屏幕大小则重复铺，改为no-repeat则表示不重复铺 background-position:50% 50%;&#125;// 页面背景色.container &#123; background-color: rgba(0, 0, 0, 0);&#125;// 页面留白更改.header-inner &#123; padding-top: 0px; padding-bottom: 0px;&#125;.posts-expand &#123; padding-top: 80px;&#125;.posts-expand .post-meta &#123; margin: 5px 0px 0px 0px;&#125;.post-button &#123; margin-top: 0px;&#125;// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(100, 100, 100, 1); -moz-box-shadow: 0 0 5px rgba(100, 100, 100, 1); &#125;// 文章.post &#123; margin-bottom: 50px; padding: 45px 36px 36px 36px; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5); background-color: rgba(255, 255, 255,0.65);&#125;// 文章标题字体.posts-expand .post-title &#123; font-size: 26px; font-weight: 700;&#125;// 文章标题动态效果.posts-expand .post-title-link::before &#123; background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);&#125;// 文章元数据（meta）留白更改.posts-expand .post-meta &#123; margin: 10px 0px 20px 0px;&#125;// 文章的描述description.posts-expand .post-meta .post-description &#123; font-style: italic; font-size: 14px; margin-top: 30px; margin-bottom: 0px; color: #666;&#125;// [Read More]按钮样式.post-button .btn &#123; color: #555 !important; background-color: rgb(255, 255, 255); border-radius: 3px; font-size: 15px; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35); border: none !important; transition-property: unset; padding: 0px 15px;&#125;.post-button .btn:hover &#123; color: rgb(255, 255, 255) !important; border-radius: 3px; font-size: 15px; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35); background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);&#125;// 去除在页面文章之间的分割线.posts-expand .post-eof &#123; margin: 0px; background-color: rgba(255, 255, 255, 0);&#125;// 去除页面底部页码上面的横线.pagination &#123; border: none; margin: 0px;&#125;// 页面底部页码.pagination .page-number.current &#123; border-radius: 100%; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5); background-color: rgba(255, 255, 255, 0.35);&#125;.pagination .prev, .pagination .next, .pagination .page-number &#123; margin-bottom: 10px; border: none;&#125;.pagination .space &#123; color: rgb(255, 255, 255);&#125;// 页面底部页脚.footer &#123; line-height: 1.5; background-color: rgba(255, 255, 255, 0.75); color: #333; border-top-width: 3px; border-top-style: solid; border-top-color: rgb(161, 102, 171); box-shadow: 0px -10px 10px 0px rgba(0, 0, 0, 0.15);&#125;// 文章底部的tags.posts-expand .post-tags a &#123; border-bottom: none; margin-right: 0px; font-size: 13px; padding: 0px 5px; border-radius: 3px; transition-duration: 0.2s; transition-timing-function: ease-in-out; transition-delay: 0s;&#125;.posts-expand .post-tags a:hover &#123; background: #eee;&#125;// 文章底部留白更改.post-widgets &#123; padding-top: 0px;&#125;.post-nav &#123; margin-top: 30px;&#125;// 文章底部页面跳转.post-nav-item a &#123; color: rgb(80, 115, 184); font-weight: bold;&#125;.post-nav-item a:hover &#123; color: rgb(161, 102, 171); font-weight: bold;&#125;// 文章底部评论.comments &#123; background-color: rgba(255, 255, 255,0.65); box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.35); margin: 80px 0px 40px 0px;&#125;// 超链接样式a &#123; color: rgb(80, 115, 184); border-bottom-color: rgb(80, 115, 184);&#125;a:hover &#123; color: rgb(161, 102, 171); border-bottom-color: rgb(161, 102, 171);&#125;// 分割线样式hr &#123; margin: 10px 0px 30px 0px;&#125;// 文章内标题样式（左边的竖线）.post-body h2, h3, h4, h5, h6 &#123; border-left: 4px solid rgb(161, 102, 171); margin-left: -36px; padding-left: 32px;&#125;// 去掉图片边框.posts-expand .post-body img &#123; border: none; padding: 0px;&#125;.post-gallery .post-gallery-img img &#123; padding: 3px;&#125;// 文章``代码块的自定义样式code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// 文章```代码块顶部样式.highlight figcaption &#123; margin: 0em; padding: 0.5em; background: #eee; border-bottom: 1px solid #e9e9e9;&#125;.highlight figcaption a &#123; color: rgb(80, 115, 184);&#125;// 文章```代码块diff样式pre .addition &#123; background: #e6ffed;&#125;pre .deletion &#123; background: #ffeef0;&#125;// 右下角侧栏按钮样式.sidebar-toggle &#123; right: 10px; bottom: 43px; background-color: rgba(232, 33, 172, 0.75); border-radius: 5px; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.35);&#125;.page-post-detail .sidebar-toggle-line &#123; background: rgb(7, 179, 155);&#125;// 右下角返回顶部按钮样式.back-to-top &#123; line-height: 1.5; right: 10px; padding-right: 5px; padding-left: 5px; padding-top: 2.5px; padding-bottom: 2.5px; background-color: rgba(232, 33, 172, 0.75); border-radius: 5px; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.35);&#125;.back-to-top.back-to-top-on &#123; bottom: 10px;&#125;// 侧栏.sidebar &#123; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.5); background-color: rgba(0, 0, 0, 0.75);&#125;.sidebar-inner &#123; margin-top: 30px;&#125;// 侧栏头像（圆形以及旋转效果）.site-author-image &#123; border: 2px solid rgb(255, 255, 255); border-radius: 100%; transition: transform 1.0s ease-out;&#125;img:hover &#123; transform: rotateZ(360deg);&#125;.posts-expand .post-body img:hover &#123; transform: initial;&#125;// 时间轴样式.posts-collapse &#123; margin: 50px 0px;&#125;@media (max-width: 1023px) &#123; .posts-collapse &#123; margin: 50px 20px; &#125;&#125;// 时间轴左边线条.posts-collapse::after &#123; margin-left: -2px; background-image: linear-gradient(180deg,#f79533 0,#f37055 15%,#ef4e7b 30%,#a166ab 44%,#5073b8 58%,#1098ad 72%,#07b39b 86%,#6dba82 100%);&#125;// 时间轴左边线条圆点颜色.posts-collapse .collection-title::before &#123; background-color: rgb(255, 255, 255);&#125;// 时间轴文章标题左边圆点颜色.posts-collapse .post-header:hover::before &#123; background-color: rgb(161, 102, 171);&#125;// 时间轴年份.posts-collapse .collection-title h1, .posts-collapse .collection-title h2 &#123; color: rgb(255, 255, 255);&#125;// 时间轴文章标题.posts-collapse .post-title a &#123; color: rgb(80, 115, 184);&#125;.posts-collapse .post-title a:hover &#123; color: rgb(161, 102, 171);&#125;// 时间轴文章标题底部虚线.posts-collapse .post-header:hover &#123; border-bottom-color: rgb(161, 102, 171);&#125;// archives页面顶部文字.page-archive .archive-page-counter &#123; color: rgb(255, 255, 255);&#125;// archives页面时间轴左边线条第一个圆点颜色.page-archive .posts-collapse .archive-move-on &#123; top: 10px; opacity: 1; background-color: rgb(255, 255, 255); box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);&#125;// 分类页面.post-block.page &#123; margin-top: 40px;&#125;.category-all-page &#123; margin: -80px 50px 40px 50px; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5); background-color: rgba(255, 255, 255,0.65); padding: 86px 36px 36px 36px;&#125;@media (max-width: 767px) &#123; .category-all-page &#123; margin: -73px 15px 50px 15px; &#125; .category-all-page .category-all-title &#123; margin-top: -5px; &#125;&#125;// 标签云页面.tag-cloud &#123; margin: -80px 50px 40px 50px; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5); background-color: rgba(255, 255, 255,0.65); padding: 86px 36px 36px 36px;&#125;.tag-cloud-title &#123; margin-bottom: 15px;&#125;@media (max-width: 767px) &#123; .tag-cloud &#123; margin: -73px 15px 50px 15px; padding: 86px 5px 36px 5px; &#125;&#125;// 自定义ABOUT页面的样式.about-page &#123; margin: -80px 0px 60px 0px; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5); background-color: rgba(255, 255, 255,0.65); padding: 106px 36px 36px 36px;&#125;@media (max-width: 767px) &#123; .about-page &#123; margin: -73px 0px 50px 0px; padding: 96px 15px 20px 15px; &#125;&#125;h2.about-title &#123; border-left: none !important; margin-left: 0px !important; padding-left: 0px !important; text-align: center; background-image: linear-gradient(90deg, #a166ab 0%, #a166ab 40%, #ef4e7b 45%, #f37055 50%, #ef4e7b 55%, #a166ab 60%, #a166ab 100%); background-size: cover; -webkit-background-clip: text; -webkit-text-fill-color: transparent; user-select: none;&#125; 参考 NexT 使用文档 Hexo搭建博客的个性化设置 next主题个性化教程:打造炫酷网站 Hexo+NexT+GithubPages的超深度优化]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub-Hexo 搭建博客]]></title>
    <url>%2Fhexo%2F4625%2F</url>
    <content type="text"><![CDATA[初次接触 hexo，并用 hexo 搭建了自己的博客，顺便记录下搭建过程 前言本机环境为windows git安装 git Git 官方版本 配置 git当安装完 Git 应该做的第一件事情就是设置用户名称和邮件地址。官方解释： Tell Git your name so your commits will be properly labeledTell Git the email address that will be associated with your Git commits 也就是告诉版本控制软件 Git 接下来在这台电脑上提交的文件的是谁,是哪一个 E-mail 地址。 在 Git Bash 中执行如下代码即可： 12$ git config --global user.name "username"$ git config --global user.email "username@example.com" git&amp;GitHubgit 是一个版本控制的工具，是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。github 有点类似于远程仓库，用于存放用git管理的各种项目。 与github建立联系为了能够在本地使用 git 管理 github 上的项目，需要进行一些配置，这里使用SSH的方式进行认证，避免频繁输入用户名和邮箱地址。 检查电脑上是否已经有 SSH keys12$ ls -al ~/.ssh# Lists the files in your .ssh directory, if they exist 如果没有 SSH key，则生成新的 SSH key12$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"# Creates a new ssh key, using the provided email as a label 然后，Git sh 中会出现：1Generating public/private rsa key pair. 表示新的 SSH 已经生成了，之后一路回车。12Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again] 让你设置使用 SSH 密钥时的密码，由于我们都是在自己个人的电脑上操作，所以仍然回车，不设置密码即可。 将 SSH key 添加到 ssh-agent确保 ssh-agent 正在运行：12# start the ssh-agent in the background$ eval $（ssh-agent -s） 将 SSH 私钥添加到 ssh-agent：1$ ssh-add ~/.ssh/id_rsa 将 SSH key 添加到 Github 账户拷贝key：12clip &lt; ~/.ssh/id_rsa.pub# Copies the contents of the id_rsa.pub file to your cllipboard 此时，SSH Key 已经在我们的剪切板里了。然后登录 Github 帐号，点击右上方自己的头像，选择”Settings”，在右边的”Personal settings”侧边栏选择”SSH Keys”。在 Title 这里输入 Key 的label，比如 your_name - PC，然后在 Key 里面把 SSH Key 粘贴进去，点击”Add key”按钮。 测试 SSH 连接测试一下，跟 Github 服务器 SSH 连接是否已经建立：12$ ssh -T git@github.com# Attempts to ssh to GitHub 可能会看到类似于：123The authenticity of host 'github.com (192.30.252.1)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 没关系的，输入 yes 敲回车，就可以看到如下的成功信息了12Hi username! You've successfully authenticated, but GitHub does notprovide shell access. Hexo安装Hexo安装Hexo相当简单。在安装之前，必须检查电脑中是否已经安装下列应用： Node.js Git 在安装完这两者后，安装 Hexo 很简单，只需在终端中键入如下命令，回车等待安装完成。 1$ npm install -g hexo-cli 建立站点先在电脑中的某一位置建立好 your_name.github.io 文件夹，比如 D:\Blog\your_name.github.io，点击鼠标右键选择 Git sh，依次执行下面两条命令，建立网站：123$ hexo init$ npm install#安装依赖包 完成后，your_name.github.io 文件夹下面的目录如下：1234567.├── _config.yml├── package.json├── scaffolds├── source| └── _posts└── themes _config.yml 文件存放着网站的配置信息，可以在这里配置大部分的参数。 package.json 文件存放着插件信息，从中可以查看那些插件已经安装。 scaffolds 是模板文件夹，新建文章时，Hexo 会根据 scaffolds 来建立文件，不过这个模板和后面的主题里指的模板不一样。 source 是存放用户资源的地方的文件夹，除 _posts 文件夹之外，开头命名为 _ (下划线) 的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes 主题文件夹，Hexo 会根据主题来生成静态页面，我们以后自己安装的主题也都会放在这个文件夹下面，默认的 landscape 主题已经在里面了。 至此，博客搭建成功！当然，仅仅是本地的。此时执行：12$ hexo g$ hexo server 然后在浏览器输入 localhost:4000 就可以本地浏览了。 配置站点在 _config.yml 中，可以修改大部份的配置，里面每一个参数的含义可以查看Hexo 的官方文档 开始使用 — 配置 ，这里暂且只修改 title，subtitle 和 author，替换成自己网站的名字和作者名即可。 写新文章1.在 Git sh 执行命令：1$ hexo new "my new post" 基本操作 — Front-matter 2.在 your_name.github.io/source/_posts文件夹下，打开 my-new-post.md 如下： Markdown 语法说明 (简体中文版) 12345678910111213title: my new post #可以改成中文的，如“新文章”date: 2017/12/7 20:46:25categories: blog #文章文类tags: [博客，文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog---#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上&lt;!--more--&gt;#在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。Hexo Test............ Front-matter 是文件最上方以 —— 分隔的区域，用于指定文章的标题、建立日期、更新日期等，如果主题模板还支持分类和标签的话，还可以指定分类和标签。 几个操作命令12345678910$ hexo init [folder]#新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站$ hexo g#生成静态文件$ hexo server#启动服务器。默认情况下，访问网址为： http://localhost:4000/$ hexo d#部署网站$ hexo clean#清除缓存文件 (db.json) 和 public 文件夹下已生成的静态文件。 更换主题如果觉得默认主题 landscape 不大喜欢，可以去 Themes | Hexo 中挑选自己喜欢的主题。这里以material为例。 克隆主题进入到本地博客目录的 themes 目录下：执行如下命令：1$ git clone https://github.com/viosey/hexo-theme-material.git 配置新主题将 your_name.github.io/_config.yml 中 theme 的值由原来默认的 landscape 改为 material 。至此，主题已经更换完成，依次运行123$ hexo clean$ hexo g$ hexo server 我们就可以在本地，通过 http://localhost:4000/ 查看网站的新样式了 部署到 github在上面，我们已经配置好了所需的所有东西，并成功的搭建了一个本地 Hexo 博客。接下来使用 GitHub Pages 搭建一个他人能够访问的 Hexo 博客。 一般部署编辑 your_name.github.io/_config.yml。 默认生成的_config.yml：1234# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: 修改后的_config.yml：12345678...# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/your_name/your_name.github.io.git branch: 分支（User Pages为master，Project Pages为gh-pages）... 为了能够使Hexo部署到 GitHub 上，需要安装一个插件： 1$ npm install hexo-deployer-git --save 然后，执行下列指令即可完成部署： 12$ hexo g$ hexo d 之后，可以通过在浏览器键入：username.github.io 进行在线浏览了 优化部署场景需求： 当重装电脑或者在不同电脑上时,如何高效持续更新博客当本地博客资料丢失后,该怎么办….. 其实，Hexo生成的网站文件中就有 .gitignore 文件，因此它的本意也是想我们将 Hexo 生成的网站文件存放到 GitHub 上进行管理。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪博文的修改过程。 .gitignore 文件内容如下：1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ 备份到 GitHub 上进行管理有两种思路： 一种是另外新建一个库,将文件上传即可 另一种是在 github pages 库的基础上新建一个分支即可 hexo 是将 markdown 源文件 ‘翻译成’ 静态网页文件，然后将网页文件部署(上传)到 github pages 上面，其实本地是两种文件都有的，也就是静态文件和Hexo环境. 所以，我们的思路其实就是把二者，分别存放在username.github.io的 master 和 hexo 分支上 如下所示：1234username.github.io | ├── master ── 存放静态文件 └── hexo(默认) ── 存放hexo生成的网站文件 主要就是在 git 建立个分支，把本地的 hexo 环境用 git 管理起来 续以上内容进入 your_name.github.io 文件夹，右键 Git Bash，依次输入如下命令：12345678910111213141516$ git init #(当前分支为master)#初始化本地仓库,就是让本地文件夹归 git 管.$ git add .#添加所有文件到 git 暂存区$ git commit -m "备注信息"#将暂存区的所有文件提交到 git 库$ git branch hexo#创建新分支 hexo$ git checkout hexo #(当前分支为hexo)#切换到分支 hexo.$ git remote add origin https://github.com/yourname/yourname.github.io.git#将本地 git 库"连接"到远程 blog 库$ git push -u origin hexo#第一次推送 hexo 分支的所有内容$ hexo g -d#生成网站并部署到 GitHub 上 这样一来，在 GitHub 上的 username.github.io 仓库就有两个分支，一个 hexo 分支用来存放网站的原始文件，一个 master 分支用来存放生成的静态网页。 博客管理流程日常维护在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理： 1234$ git add .$ git commit -m "备注信息"$ git push origin hexo #(当前分支为hexo)$ hexo g -d #(当前分支为master) 新同步当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤： 拷贝仓库：1$ git clone git@github.com:your_name/your_name.github.io.git #（默认分支为hexo） 在本地新拷贝的 your_name.github.io 文件夹下,依次执行：1234$ npm install -g hexo-cli$ npm install$ npm install hexo-deployer-git#不需要 hexo init]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Git</tag>
        <tag>GitHub Page</tag>
      </tags>
  </entry>
</search>
